local hookmethod
hookmethod = hookmetamethod(game, '__index', function(Self,Key)
    if Key == "WalkSpeed" and Self == game.Players.LocalPlayer.Character.Humanoid then return 16 end
    return hookmethod(Self,Key);
end);
local hookmethod
hookmethod = hookmetamethod(game, '__index', function(Self,Key)
    if Key == "JumpPower" and Self == game.Players.LocalPlayer.Character.Humanoid then return 50 end
    return hookmethod(Self,Key);
end);

local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
local Window = Rayfield:CreateWindow({
    Name = "Xtrey10x Hub - Arcane Odyssey",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
    Discord = {
       Enabled = false,
       Invite = "SIRIUS", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD.
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Sirius Hub",
       Subtitle = "Key System",
       Note = "Join the discord (discord.gg/sirius)",
       FileName = "SiriusKey",
       SaveKey = true,
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = "Hello"
    }
 })
 --functions
 local PlayList = {}
 for i,v in pairs(game:GetService("Players"):GetPlayers()) do 
     if v ~= game.Players.LocalPlayer then 
         table.insert(PlayList,v.Name)
     end
 end 

    local tool_table = {}
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v:IsA("Tool") then
            table.insert(tool_table, v.Name)
        end
    end
    
    distance = 5 
        

     
 local Tab = Window:CreateTab("Lvls", 4483362458) -- Title, Image
 local Section = Tab:CreateSection("General")


 local Toggle = Tab:CreateToggle({
    Name = "Autohit",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G.hit = Value
        while _G.hit == true do
     
-- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = game:GetService("Players").LocalPlayer.Character:FindFirstChild("Basic Combat"),
    [3] = Vector3.new(465.06890869140625, 405.9702453613281, 6235.40771484375)
}

game:GetService("ReplicatedStorage").RS.Remotes.Combat.UseMelee:FireServer(unpack(args))


       wait()
    end
    end,
 })
local Toggle = Tab:CreateToggle({
   Name = "Attach to Player",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(t)
    autofarm = t 

    game:GetService("RunService").Stepped:Connect(function()
    if autofarm then
                    pcall(function()
        game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
    end)
end
end)
                while autofarm do wait()
                    pcall(
                        function()
                            for i, v in pairs(game:GetService("Workspace").Living:GetDescendants()) do
                                if v.Name == mobs and v:FindFirstChild("HumanoidRootPart")and v:FindFirstChild("Humanoid") then
                                   wait(.7)
                                    repeat
                                        wait()
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =  CFrame.new(v.HumanoidRootPart.Position + Vector3.new(0,distance,0),v.HumanoidRootPart.Position)
                                    until v.Humanoid.Health <= 0  or autofarm == false 
                                end
                            end
                        end
                    )
                end
           
   end,
})
local Dropdown = Tab:CreateDropdown({
    Name = "Players",
    Options = PlayList,
    CurrentOption = "Option 1",
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(t)
        mobs = t
    end,
 })


 local Slider = Tab:CreateSlider({
   Name = "Distance",
   Range = {-9, 10},
   Increment = 1,
   Suffix = "Distance",
   CurrentValue = 5,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(t)
    distance = t
   end,
})

local Button = Tab:CreateButton({
    Name = "Hitbox",
    Callback = function()
        _G.HeadSize = 25
        _G.Disabled = true
         
        game:GetService('RunService').RenderStepped:connect(function()
        if _G.Disabled then
        for i,v in next, game:GetService('Players'):GetPlayers() do
        if v.Name ~= game:GetService('Players').LocalPlayer.Name then
        pcall(function()
        v.Character.HumanoidRootPart.Size = Vector3.new(_G.HeadSize,_G.HeadSize,_G.HeadSize)
        v.Character.HumanoidRootPart.Transparency = 0.7
        v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really blue")
        v.Character.HumanoidRootPart.Material = "Neon"
        v.Character.HumanoidRootPart.CanCollide = false
        end)
        end
        end
        end
    end)
    end,
 })

 local Tab2 = Window:CreateTab("LocalPlayer", 4483362458) -- Title, Image
 local Section = Tab2:CreateSection("Player")

 local Button = Tab2:CreateButton({
    Name = "Fly (e up q down LeftCtrl)",
    Callback = function(Value)
        local flyspeed = 40
        local flying = Value
        local maxdistance = 1000 --using math.huge makes this script wonky
        local uiservice = game.UserInputService
        local lplr = game.Players.LocalPlayer
        local mouse = lplr:GetMouse()
        local function GetVelocity(pos1,pos2,StudsPerSecond)
        local distance = (pos2 - pos1)
        local mag = distance.Magnitude
        return (distance/mag)*StudsPerSecond
        end
        local function getkey(keycode)
        local key = tostring(keycode):lower()
        local findcode, a = key:find("keycode.")
        return key:sub(a+1)
        end
        local keys = {}
        local pos = Vector3.new()
        game.RunService.Heartbeat:connect(function()
        pcall(function()
        local hrp = lplr.Character.Humanoid.SeatPart or lplr.Character.Humanoid.RootPart
        local frontoffset = CFrame.new() + Vector3.new(0,0,-maxdistance)
        local backoffset = CFrame.new() + Vector3.new(0,0,maxdistance)
        local leftoffset = CFrame.new() + Vector3.new(-maxdistance,0,0)
        local rightoffset = CFrame.new() + Vector3.new(maxdistance,0,0)
        local upoffset = CFrame.new() + Vector3.new(0,maxdistance,0)
        local downoffset = CFrame.new() + Vector3.new(0,-maxdistance,0)
        local velocity = Vector3.new()
            if flying then
            if keys.w_active then
                velocity = velocity + GetVelocity(hrp.Position,(hrp.CFrame*frontoffset).Position,flyspeed)
            end
            if keys.s_active then
                velocity = velocity + GetVelocity(hrp.Position,(hrp.CFrame*backoffset).Position,flyspeed)
            end
            if keys.a_active then
                velocity = velocity + GetVelocity(hrp.Position,(hrp.CFrame*leftoffset).Position,flyspeed)
            end
            if keys.d_active then
                velocity = velocity + GetVelocity(hrp.Position,(hrp.CFrame*rightoffset).Position,flyspeed)
            end
            if keys.e_active then
                velocity = velocity + GetVelocity(hrp.Position,(CFrame.new(hrp.Position)*upoffset).Position,flyspeed)
            end
            if keys.q_active then
                velocity = velocity + GetVelocity(hrp.Position,(CFrame.new(hrp.Position)*downoffset).Position,flyspeed)
            end
            hrp.Velocity = velocity
             hrp.CFrame = CFrame.new(hrp.Position, (workspace.Camera.CFrame*frontoffset).Position)
            end
            if flying and not keys.w_active and not keys.a_active and not keys.s_active and not keys.d_active and not keys.q_active and not keys.e_active then
                hrp.CFrame = CFrame.new(pos, (workspace.Camera.CFrame*frontoffset).Position)
                hrp.Velocity = Vector3.new()
        hrp.RotVelocity = Vector3.new()
            else
                pos = hrp.Position
            end
        end)
        end)
        uiservice.InputBegan:connect(function(key,processed)
        if processed then return end
            if key.KeyCode == Enum.KeyCode.LeftControl then
                flying = not flying
                if flying then
                    uiservice.MouseBehavior = Enum.MouseBehavior.LockCenter
                    lplr.Character.Humanoid.CameraOffset = Vector3.new(2,0,0)
                else
                    uiservice.MouseBehavior = Enum.MouseBehavior.Default
                    lplr.Character.Humanoid.CameraOffset = Vector3.new(0,0,0)
                end
            end
            keys[getkey(key.KeyCode).."_active"] = true
        end)
        uiservice.InputEnded:connect(function(key)
            keys[getkey(key.KeyCode).."_active"] = false
        end)
    end,
})

 local Slider = Tab2:CreateSlider({
    Name = "WalkSpeed",
    Range = {0, 200},
    Increment = 1,
    Suffix = "walkspeed",
    CurrentValue = 16,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().WalkSpeedValue = Value; --set your desired walkspeed here
        local Player = game:service'Players'.LocalPlayer;
        Player.Character.Humanoid:GetPropertyChangedSignal'WalkSpeed':Connect(function()
        Player.Character.Humanoid.WalkSpeed = getgenv().WalkSpeedValue;
        end)
        Player.Character.Humanoid.WalkSpeed = getgenv().WalkSpeedValue;
        
    end,
 })
 local Slider = Tab2:CreateSlider({
    Name = "JumpPower",
    Range = {0, 200},
    Increment = 1,
    Suffix = "JumpPower",
    CurrentValue = 50,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    	getgenv().JumpPowerValue = Value; --set your desired walkspeed here
local Player = game:service'Players'.LocalPlayer;
Player.Character.Humanoid:GetPropertyChangedSignal'JumpPower':Connect(function()
Player.Character.Humanoid.JumpPower = getgenv().JumpPowerValue;
end)
Player.Character.Humanoid.JumpPower = getgenv().JumpPowerValue;
    end,
 })
